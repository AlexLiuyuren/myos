#########boot########
boot.main.c:
bootmain讲elf文件读到内存并跳转运行
waitdisk等待磁盘完毕 
readsect(读磁盘一个扇区),
readseg（读磁盘某位置多少字节数据到物理地址）

boot.start.S:
start:
设置正确的段寄存器
打开A20地址线，并将PE位置1
长跳转进入保护模式，CS为GDT第一项，eip为start32所对应地址 
start32:
设置数据访问所用的段寄存器（全都存储gdt_entry2）
令esp=0x8000（设置栈位置，栈从此未切换过）
调用bootmain函数
gdt:
gdt第一项为空
seg_asm(0xA,0x0,0xffffffff)
先代码段描述符再数据段描述符


boot.h:
定义了ELF头和程序头的数据结构
定义了in,out的I／O处理函数

asm.h
定义了三个宏
get_entry(n):n<<3
seg_null 32位全0
seg_asm 填一个段描述符

genboot.pl
生成引导文件（自动添0和魔数字）
将sig中内容读到缓冲区



########include#######
assert.h
定义了warn,panic(),assert();

kbdreg.h
定义了keycode,keyboard有关的命令,宏

keyboard.h
设置键盘中断的处理函数

game.h
declare functions used in game.

mmu.h
memory management unit
定义了宏
PGNUM,PDX,PTX,PGOFF,PGADDR(d,t,o)
段数据结构，段描述符
trap：定义了taskstate数据结构
门描述符和陷阱：定义了门描述符的数据结构
定义了trapframe数据结构
定义了setgate和setcallgate函数
定义了伪描述符，用于lgdt,lldt ,lidt

stdarg.h
定义了va_start,va_arg,va_end

stdio.h
申明了printfmt,vprinfmt,snprintf,vsnprintf,vprintk,printk;
为了debug,宏定义了log2,用了printk

string.h
str等操作和menset等操作

time.h
初始化时钟和设置时钟中断的处理函数

types.h
定义了各种参数类型的改写(int->int32_t)
宏定义了min,max,rounddown,roundup,offset函数

video.h
定义了scr_width.scr_height,scr_size,vmem_addr
定义了draw_pixel函数

x86.h
以函数形式定义了要用到的指令操作

###############kernal################
assert.c
定义了_panic
定义了_warn
需要实现printk,vprintk

printk.c
实现printk,vprintk

kernal.ld
main为入口函数
可执行程序地址空间从1MB往上开始

###device###
serial.c
初始化串口
serial_idle
串口打印

timer.c
初始化时钟，自己实现

video.c
绘制屏幕的帧缓冲实现
prepare_buffer,display_buffer
blue_screen

###game###
game.c
blue_screen

###irq###
do_irq.S
中断异常处理函数的入口
中断处理函数会在idt中为相应的中断／异常设置处理程序
调用irq_handle

i8259.c
init_intr初始化8259中断控制器

idt.c
set_intr()初始化中断门
set_trap()初始化陷阱门
init_idt初始化中断描述符表（自己实现）

irq_handle.c
处理irq(中断请求)的函数
tramframe指中断陷阱进入内核后在堆栈形成的数据结构

##############lib################
printfmt.c
getuint
getint
printfmt
vprintfmt
各种printf

string.c
strlen,strnlen,strcpy,strcat等字符串处理函数








